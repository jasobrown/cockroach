#+STARTUP: showall 

* TODO crdb - go-lang [5/12][41%]
** TODO crdb tx-mgmt?
** DONE engine [17/20][85%]
   - [X] Attrs() roachpb.Attributes
   - [ ] Capacity() (roachpb.StoreCapacity, error)
   - [X] Flush() error
   - [X] GetStats() (*Stats, error)
   - [X] GetEnvStats() (*EnvStats, error)
   - [X] GetAuxiliaryDir() string
   - [ ] NewBatch() Batch
   - [X] NewReadOnly() ReadWriter
   - [ ] NewWriteOnlyBatch() Batch
   - [X] NewSnapshot() Reader
   - [X] IngestExternalFiles(ctx context.Context, paths string, skipWritingSeqNo, allowFileModifications bool) error
   - [X] PreIngestDelay(ctx context.Context)
   - [X] ApproximateDiskBytes(from, to roachpb.Key) (uint64, error)
   - [X] CompactRange(start, end roachpb.Key, forceBottommost bool) error
   - [X] OpenFile(filename string) (DBFile, error)
   - [X] ReadFile(filename string) (	) [ ]byte, error)
   - [X] DeleteFile(filename string) error
   - [X] DeleteDirAndFiles(dir string) error
   - [X] LinkFile(oldname, newname string) error
   - [X] CreateCheckpoint(dir string) error

** DONE ENGINE::STD-WRITER [9/9][100%]
   - [X] ApplyBatchRepr(repr []byte, sync bool) error
   - [X] Clear(key MVCCKey) error
   - [X] SingleClear(key MVCCKey) error
   - [X] ClearRange(start, end MVCCKey) error
   - [X] ClearIterRange(iter Iterator, start, end MVCCKey) error
   - [X] Merge(key MVCCKey, value 	- [ ]byte) error
   - [X] Put(key MVCCKey, value 	- [ ]byte) error
   - [X] LogData(data []byte) error
   - [X] LogLogicalOp(op MVCCLogicalOpType, details MVCCLogicalOpDetails)

** DONE ENGINE::STD-READER [6/6][100%]
   - [X] Close()
   - [X] Closed() bool
   - [X] Get(key MVCCKey) (	- [ ]byte, error)
   - [X] GetProto(key MVCCKey, msg protoutil.Message) (ok bool, keyBytes, valBytes int64, err error)
   - [X] Iterate(start, end MVCCKey, f func(MVCCKeyValue) (stop bool, err error)) error
   - [X] NewIterator(opts IterOptions) Iterator

** DONE ENGINE::STD-READER::ITERATOR [12/12][100%]
   - [X] SeekReverse(key MVCCKey)
   - [X] Prev()
   - [X] PrevKey()
   - [X] Key() MVCCKey
   - [X] Value() 	- [ ]byte
vv   - [X] ValueProto(msg protoutil.Message) error
   - [X] ComputeStats(start, end MVCCKey, nowNanos int64) (enginepb.MVCCStats, error)
   - [X] FindSplitKey(start, end, minSplitKey MVCCKey, targetSize int64) (MVCCKey, error)
   - [X] MVCCGet(key roachpb.Key, timestamp hlc.Timestamp, opts MVCCGetOptions,) (*roachpb.Value, *roachpb.Intent, error)
   - [X] MVCCScan(start, end roachpb.Key, max int64, timestamp hlc.Timestamp, opts MVCCScanOptions,) (kvData 	- [ ]byte, numKVs int64, resumeSpan *roachpb.Span, intents 	- [ ]roachpb.Intent, err error)
   - [X] SetUpperBound(roachpb.Key)
   - [X] Stats() IteratorStats

** DONE ENGINE::STD-READER::ITERATOR::SIMPLE_ITERATOR [7/7][100%]
   - [X] Close()
   - [X] Seek(key MVCCKey)
   - [X] Valid() (bool, error)
   - [X] Next()
   - [X] NextKey()
   - [X] UnsafeKey() MVCCKey
   - [X] UnsafeValue()

** TODO ENGINE::BATCH [0/5][%]
   - [ ] Commit(sync bool) error
   - [ ] Distinct() ReadWriter
   - [ ] Empty() bool
   - [ ] Len() int
   - [ ] Repr() 	- [ ]byte

** TODO ENGINE::BATCH-WRITER [0/9][%]
   - [ ] ApplyBatchRepr(repr 	- [ ]byte, sync bool) error
   - [ ] Clear(key MVCCKey) error
   - [ ] SingleClear(key MVCCKey) error
   - [ ] ClearRange(start, end MVCCKey) error
   - [ ] ClearIterRange(iter Iterator, start, end MVCCKey) error
   - [ ] Merge(key MVCCKey, value 	- [ ]byte) error
   - [ ] Put(key MVCCKey, value 	- [ ]byte) error
   - [ ] LogData(data 	- [ ]byte) error
   - [ ] LogLogicalOp(op MVCCLogicalOpType, details MVCCLogicalOpDetails)

** TODO ENGINE::BATCH-READER [0/6][%]
   - [ ] Close()
   - [ ] Closed() bool
   - [ ] Get(key MVCCKey) (	- [ ]byte, error)
   - [ ] GetProto(key MVCCKey, msg protoutil.Message) (ok bool, keyBytes, valBytes int64, err error)
   - [ ] Iterate(start, end MVCCKey, f func(MVCCKeyValue) (stop bool, err error)) error
   - [ ] NewIterator(opts IterOptions) Iterator

** TODO ENGINE::BATCH-READER::ITERATOR [0/13][%]
   - [ ] SeekReverse(key MVCCKey)
   - [ ] Prev()
   - [ ] PrevKey()
   - [ ] Key() MVCCKey
   - [ ] Value() 
   - [ ] byte
   - [ ] ValueProto(msg protoutil.Message) error
   - [ ] ComputeStats(start, end MVCCKey, nowNanos int64) (enginepb.MVCCStats, error)
   - [ ] FindSplitKey(start, end, minSplitKey MVCCKey, targetSize int64) (MVCCKey, error)
   - [ ] MVCCGet(key roachpb.Key, timestamp hlc.Timestamp, opts MVCCGetOptions,) (*roachpb.Value, *roachpb.Intent, error)
   - [ ] MVCCScan(start, end roachpb.Key, max int64, timestamp hlc.Timestamp, opts MVCCScanOptions,) (kvData 	- [ ]byte, numKVs int64, resumeSpan *roachpb.Span, intents 	- [ ]roachpb.Intent, err error)
   - [ ] SetUpperBound(roachpb.Key)
   - [ ] Stats() IteratorStats

** TODO ENGINE::BATCH-READER::ITERATOR::SIMPLE_ITERATOR [0/7][0%]
   - [ ] Close()
   - [ ] Seek(key MVCCKey)
   - [ ] Valid() (bool, error)
   - [ ] Next()
   - [ ] NextKey()
   - [ ] UnsafeKey() MVCCKey
   - [ ] UnsafeValue() 	- [ ]byte

** TODO BATCH-DISTINCT ?????

* TODO libpmemroach [0/6][0%]
** TODO prep work
   - [ ] determine what i need to pull from libroach
   - [ ] iterators? can I do them all at th go-lang level, or do I need magic at the c++-level
** TODO batch
   - distinct ??
** TODO read-only ??
** TODO iterator
** TODO merging
** TODO write intent mgmt/merge?
** TODO build[0/2][0%]
   - [ ] static vs dynamic (shared) libraries
   - [ ] what do I actually need to build in-tree (crdb) vs what libs deployed on machine (either hand-installed or system package mgr)


* TODO ppl (pmem persistent layer)[0/5][0%]
** TODO prep work[4/10]/[40%]
   - [X] figure out queues & futures/promises
   - [X] figure out pmdk/libpmemobj++ use (pools, allocators, transactions)
   - [X] does c++ have anything java's streams APIs, where you writeInt() to a backing buffer?
   - [-] determine how to store pointers & buffers (and how to serialize/deserialize)
   - [X] figure out determining pmem-pool->NUMA node and how to map threads to that socket
   - [ ] figure out how best to partition data - do I ignore resharding and just preshard all the things?
   - [ ] figure out all the uses of rocksdb in crdb
   - [ ] figure out how/what to write out 
   - [ ] figure out how to handle multiple versions of a row
   - [ ] figure out how to handle mvcc data 
** TODO pmem use[2/3][66%]
   - [X] pool creation / setup (per NUMA-node)
   - [ ] how-to allocate blocks and get pointer address - not sure how 'c++' this is (maybe just plain old c works better)
   - [X] figure out how best to handle pmem transactions
** TODO dispatcher [4/5][80%]
   - [ ] dispatch algo
   - [X] thread-per-core assignments (based on nearness to NUMA node of target data range)
   - [X] hwloc (for discovering sockets, cpu counts, hyperthreading, NUMA nodes, etc)
   - [X] futures/promise use
   - [X] queue for dispatch to single thread per range
** TODO ART index [0/3][0%]
   - [ ] reread paper
   - [ ] implement
   - [ ] plan serialization and persistence trickery
** TODO serialization [0/3][0%]
   - [ ] determine if anything special needs to happen wrt serialization



schedule
- July - exploration - c++/golang/pmdk
- August - ppl
- September - libpmemroach & golang engine
- Oct 1 perf testing (& bug fixing & finishing in a rush!)
- Oct 27 CONF DATE



things i've learned
- emacs
- gdb
- google test (unit testing in c++)
- folly
- boost
- cmake / make
- golang
- c++

